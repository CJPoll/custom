#compdef wt

# Completion function for wt command

_wt() {
    local curcontext="$curcontext" state line
    
    _arguments -C \
        '1: :_wt_commands' \
        '--quiet[Suppress output from script and subcommands]' \
        '--stack[Execute command for entire stack (for push/pr commands)]' \
        '--all[Push all ready branches, not just new ones (for push --stack)]' \
        '--dry-run[Show what would be done without actually doing it (for push/pr commands)]' \
        '--draft[Create draft pull requests (for pr --stack)]' \
        '*::arg:->args'
    
    case $state in
        args)
            case $words[1] in
                switch)
                    _arguments \
                        '1:branch:_wt_switchable_branches' \
                        '--pr-review[Open changed files in tabs for PR review]' \
                        '--parent[Parent branch for PR review]:branch:_wt_git_branches'
                    ;;
                rm|merge|worktree-dir)
                    _wt_worktrees
                    ;;
                sync)
                    _arguments \
                        '1:branch:_wt_worktrees' \
                        '--continue[Continue a sync operation after resolving conflicts]'
                    ;;
                create)
                    _arguments \
                        '1:branch:_wt_git_branches' \
                        '--no-symlink[Do not create symlink to .claude directory]' \
                        '--switch[Switch to the worktree after creating it]' \
                        '--parent[Parent branch for stack creation]:branch:_wt_git_branches'
                    ;;
                is-worktree)
                    _arguments \
                        '--dir[Check the specified directory]:directory:_directories'
                    ;;
                run)
                    _message 'command to run across stack'
                    ;;
                push)
                    _arguments \
                        '--stack[Push all branches in the stack]' \
                        '--all[Push all ready branches, not just new ones]' \
                        '--dry-run[Show what would be pushed without actually pushing]'
                    ;;
                pr)
                    _arguments \
                        '--stack[Create pull requests for entire stack]' \
                        '--draft[Create draft pull requests]' \
                        '--dry-run[Show what PRs would be created without creating them]'
                    ;;
                ls)
                    _arguments \
                        '--current[Show only the current branch stack]' \
                        '--install[Install Graphite (gt) if not already installed]'
                    ;;
                stack)
                    # Handle stack subcommands
                    if [[ ${#words[@]} -eq 2 ]]; then
                        # First argument after 'stack'
                        local stack_subcommands=(
                            '--current:Show only the current branch stack'
                            '--install:Install Graphite (gt) if not already installed'
                            'parent:Set or update the parent branch for the current branch'
                            'open:Create worktrees for all branches in the stack up to the given branch'
                        )
                        _describe -t stack-subcommands 'stack subcommand' stack_subcommands
                    elif [[ ${#words[@]} -ge 3 ]]; then
                        case ${words[2]} in
                            parent)
                                # Complete branch names for parent subcommand
                                if [[ ${#words[@]} -eq 3 ]]; then
                                    _wt_git_branches
                                fi
                                ;;
                            open)
                                # Complete branch names and flags for open subcommand
                                if [[ ${#words[@]} -eq 3 ]]; then
                                    _wt_git_branches
                                elif [[ ${#words[@]} -eq 4 ]]; then
                                    # Offer --create-sessions flag if branch was provided
                                    _arguments '--create-sessions[Also create tmux sessions for each worktree (without switching)]'
                                fi
                                ;;
                            --current|--install)
                                # No additional arguments for these flags
                                ;;
                        esac
                    fi
                    ;;
                migrate-to-gt)
                    # No additional arguments needed for migration
                    _message 'no more arguments'
                    ;;
            esac
            ;;
    esac
}

_wt_commands() {
    local commands=(
        'init:Set up the worktrees directory'
        'list:List all worktrees for the current project'
        'ls:Show all tracked branches (alias for stack)'
        'create:Create a worktree for the specified branch'
        'rm:Remove the worktree for the specified branch'
        'switch:Change to the worktree for the specified branch'
        'merge:Merge a worktree branch (must be run from parent repo)'
        'worktree-dir:Get the directory path for a branch worktree'
        'is-worktree:Check if a directory is a git worktree'
        'stack:Show branch hierarchy using Graphite (use --current for current stack only, open to create worktrees)'
        'sync:Sync the stack by rebasing child branches onto updated parents'
        'restack:Fix stack relationships and rebase onto correct parents'
        'next:Navigate to a child branch in the stack (switch tmux session)'
        'prev:Navigate to the parent branch in the stack (switch tmux session)'
        'run:Execute a command across all branches in the stack'
        'push:Push branches to origin (use --stack for entire stack)'
        'pr:Create pull requests (use --stack for entire stack)'
        'migrate-to-gt:Migrate existing git-stack metadata to Graphite format'
    )
    _describe -t commands 'wt command' commands
}

# Function to complete worktree names
_wt_worktrees() {
    local worktrees_dir="$HOME/.local/worktrees/$(basename $(pwd))"
    local worktrees=()

    if [[ -d "$worktrees_dir" ]]; then
        # Get all worktrees from git that are under our worktrees directory
        local git_output
        git_output=$(git worktree list 2>/dev/null)
        
        if [[ -n "$git_output" ]]; then
            while IFS= read -r line; do
                # Extract the path from each line (first field)
                local worktree_path="${line%% *}"
                
                # Check if this worktree is under our worktrees_dir
                if [[ "$worktree_path" == "$worktrees_dir/"* ]]; then
                    # Extract the branch name by removing the prefix
                    local branch="${worktree_path#$worktrees_dir/}"
                    if [[ -n "$branch" ]]; then
                        # Quote the branch name if it contains special characters
                        worktrees+=("${(q)branch}")
                    fi
                fi
            done <<< "$git_output"
        fi
        
        if (( ${#worktrees} > 0 )); then
            # Use compadd directly for better control
            compadd -a worktrees
        fi
    fi
}

# Function to complete git branch names
_wt_git_branches() {
    # Get all branches (local and remote)
    local -a branches
    branches=(${(f)"$(git for-each-ref --format='%(refname:short)' refs/heads refs/remotes 2>/dev/null | grep -v HEAD | sed 's|^origin/||' | sort -u)"})
    
    _multi_parts / branches
}

# Function to complete branches for switch command
_wt_switchable_branches() {
    # Get all local branches
    local -a branches
    branches=(${(f)"$(git for-each-ref --format='%(refname:short)' refs/heads 2>/dev/null)"})
    
    # Also get branches that have worktrees
    local worktrees_dir="$HOME/.local/worktrees/$(basename $(pwd))"
    if [[ -d "$worktrees_dir" ]]; then
        local git_output
        git_output=$(git worktree list 2>/dev/null)
        
        if [[ -n "$git_output" ]]; then
            while IFS= read -r line; do
                # Extract the path and branch from each line
                local worktree_path="${line%% *}"
                local branch_info="${line#* }"
                # Extract branch name from format like "abc123 [branch-name]"
                if [[ "$branch_info" =~ \[([^\]]+)\] ]]; then
                    local branch="${match[1]}"
                    # Add to branches if not already present
                    if [[ ! " ${branches[@]} " =~ " ${branch} " ]]; then
                        branches+=("$branch")
                    fi
                fi
            done <<< "$git_output"
        fi
    fi
    
    # Sort and remove duplicates
    branches=(${(u)branches})
    
    if (( ${#branches} > 0 )); then
        _multi_parts / branches
    fi
}

_wt "$@"
