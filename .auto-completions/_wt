#compdef wt

# Completion function for wt command

_wt() {
    local curcontext="$curcontext" state line
    
    _arguments -C \
        '1: :_wt_commands' \
        '*::arg:->args'
    
    case $state in
        args)
            case $words[1] in
                switch|rm)
                    _wt_worktrees
                    ;;
                create)
                    _wt_git_branches
                    ;;
                is-worktree)
                    _arguments \
                        '--dir[Check the specified directory]:directory:_directories'
                    ;;
            esac
            ;;
    esac
}

_wt_commands() {
    local commands=(
        'init:Set up the worktrees directory'
        'list:List all worktrees for the current project'
        'ls:List all worktrees for the current project'
        'create:Create a worktree for the specified branch'
        'rm:Remove the worktree for the specified branch'
        'switch:Change to the worktree for the specified branch'
        'is-worktree:Check if a directory is a git worktree'
    )
    _describe -t commands 'wt command' commands
}

# Function to complete worktree names
_wt_worktrees() {
    local worktrees_dir="$(pwd)/worktrees"
    local worktrees=()
    
    if [[ -d "$worktrees_dir" ]]; then
        # Get all worktrees from git that are under our worktrees directory
        local git_output
        git_output=$(git worktree list 2>/dev/null)
        
        if [[ -n "$git_output" ]]; then
            while IFS= read -r line; do
                # Extract the path from each line (first field)
                local worktree_path="${line%% *}"
                
                # Check if this worktree is under our worktrees_dir
                if [[ "$worktree_path" == "$worktrees_dir/"* ]]; then
                    # Extract the branch name by removing the prefix
                    local branch="${worktree_path#$worktrees_dir/}"
                    if [[ -n "$branch" ]]; then
                        # Quote the branch name if it contains special characters
                        worktrees+=("${(q)branch}")
                    fi
                fi
            done <<< "$git_output"
        fi
        
        if (( ${#worktrees} > 0 )); then
            # Use compadd directly for better control
            compadd -a worktrees
        fi
    fi
}

# Function to complete git branch names
_wt_git_branches() {
    # Get all branches (local and remote)
    local -a branches
    branches=(${(f)"$(git for-each-ref --format='%(refname:short)' refs/heads refs/remotes 2>/dev/null | grep -v HEAD | sed 's|^origin/||' | sort -u)"})
    
    _multi_parts / branches
}

_wt "$@"
