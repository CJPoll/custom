#!/bin/bash
set -uo pipefail

# Migration script from git-stack to Graphite (gt)
# This script converts existing git-stack metadata to Graphite format

# Get project information
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
PROJECT_NAME=$(basename "$PROJECT_DIR")
WORKTREES_DIR="${HOME}/.local/worktrees/$PROJECT_NAME"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Counters
MIGRATED_COUNT=0
FAILED_COUNT=0
SKIPPED_COUNT=0

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1" >&2
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

check_prerequisites() {
    if ! command -v gt &>/dev/null; then
        log_error "gt (Graphite) is not installed"
        echo "Install with: brew install graphite"
        return 1
    fi
    
    if ! git rev-parse --git-dir &>/dev/null; then
        log_error "Not in a git repository"
        return 1
    fi
    
    return 0
}

migrate_worktree() {
    local worktree_path="$1"
    local branch_name=$(git -C "$worktree_path" rev-parse --abbrev-ref HEAD 2>/dev/null)
    
    if [ -z "$branch_name" ]; then
        log_warn "Could not determine branch for $worktree_path"
        return 1
    fi
    
    log_info "Migrating $branch_name in $worktree_path"
    
    # Get existing git-stack parent
    local parent=$(git -C "$worktree_path" config --get "branch.$branch_name.stack-base" 2>/dev/null || true)
    if [ -z "$parent" ]; then
        parent=$(git -C "$worktree_path" config --get "git-stack.auto-base" 2>/dev/null || true)
    fi
    
    # Initialize gt in worktree if needed
    if [ ! -f "$worktree_path/.git/.graphite_repo_config" ]; then
        log_info "  Initializing gt in $worktree_path"
        # Skip initialization - it requires interactive input
        log_info "    Please run 'gt repo init' manually if not already done"
    else
        log_info "  gt already initialized in $worktree_path"
    fi
    
    # Set parent if found
    if [ -n "$parent" ]; then
        log_info "  Setting parent: $branch_name -> $parent"
        if gt -C "$worktree_path" track "$branch_name" --parent "$parent" -q 2>/dev/null; then
            # Remove old git-stack config
            git -C "$worktree_path" config --unset "branch.$branch_name.stack-base" 2>/dev/null || true
            git -C "$worktree_path" config --unset "git-stack.auto-base" 2>/dev/null || true
            return 0
        else
            log_warn "  Failed to set parent with gt"
            return 1
        fi
    else
        log_info "  No parent relationship found, skipping"
        return 0
    fi
}

symlink_graphite_config() {
    local main_config="$PROJECT_DIR/.git/.graphite_repo_config"
    
    if [ ! -f "$main_config" ]; then
        log_warn "No .graphite_repo_config in main project"
        return
    fi
    
    if [ -d "$WORKTREES_DIR" ]; then
        for wt in "$WORKTREES_DIR"/*; do
            [ -d "$wt" ] || continue
            local wt_config="$wt/.git/.graphite_repo_config"
            
            if [ ! -e "$wt_config" ]; then
                log_info "Creating symlink for $(basename "$wt")"
                ln -s "$main_config" "$wt_config"
            fi
        done
    fi
}

# Main migration logic
main() {
    echo "==================================="
    echo "Git-Stack to Graphite Migration"
    echo "==================================="
    echo
    
    # Check prerequisites
    if ! check_prerequisites; then
        exit 1
    fi
    
    log_info "Starting migration for project: $PROJECT_NAME"
    echo
    
    # Migrate main project
    log_info "Processing main project..."
    if migrate_worktree "$PROJECT_DIR"; then
        ((MIGRATED_COUNT++))
    else
        ((FAILED_COUNT++))
    fi
    echo
    
    # Migrate all worktrees
    if [ -d "$WORKTREES_DIR" ]; then
        log_info "Processing worktrees..."
        for wt in "$WORKTREES_DIR"/*; do
            [ -d "$wt" ] || continue
            
            if migrate_worktree "$wt"; then
                ((MIGRATED_COUNT++))
            else
                ((FAILED_COUNT++))
            fi
            echo
        done
    else
        log_info "No worktrees directory found"
    fi
    
    # Create symlinks for config sharing
    log_info "Setting up config symlinks..."
    symlink_graphite_config
    echo
    
    # Summary
    echo "==================================="
    echo "Migration Summary"
    echo "==================================="
    echo "Migrated: $MIGRATED_COUNT worktrees"
    echo "Failed:   $FAILED_COUNT worktrees"
    echo "Skipped:  $SKIPPED_COUNT worktrees"
    echo
    
    if [ $FAILED_COUNT -eq 0 ]; then
        log_info "Migration completed successfully!"
        echo
        echo "Next steps:"
        echo "1. Verify stack with: wt stack"
        echo "2. Test sync with: wt sync"
        echo "3. Remove this migration script when satisfied"
    else
        log_warn "Migration completed with errors"
        echo "Please review failed worktrees manually"
    fi
}

# Run main function
main "$@"