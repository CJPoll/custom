#!/bin/bash

set -euo pipefail

# wt-stack - Handle 'wt stack' subcommands
# This script manages stack operations for worktree-based development

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="${SCRIPT_DIR}/../wt-lib"

# Source library files
source "${LIB_DIR}/common.sh"
source "${LIB_DIR}/worktree.sh"
source "${LIB_DIR}/stack.sh"
source "${LIB_DIR}/create.sh"

# Environment variables for configuration
QUIET="${QUIET:-false}"
STACK_CREATE_SESSIONS="${STACK_CREATE_SESSIONS:-false}"

usage() {
    cat << EOF
Usage: wt stack [subcommand] [options]

Subcommands:
  (no subcommand)   Show all tracked branches and their relationships (gt ls)
  --current         Show only the current branch's stack (gt ls -s)
  --install         Install Graphite (gt) if not already installed

  parent [branch]   Show or set the parent branch for the current branch
                    --restack: restack after setting parent
                    --switch: switch to parent worktree after setting

  open <branch>     Create worktrees for all branches in the stack up to the given branch
                    --create-sessions: also create tmux sessions for each worktree

  move              Change a branch's parent or reorder siblings
                    --onto <parent>: move to new parent
                    --up/--down: reorder among siblings
                    --dry-run: preview changes without applying

  reorder           Rearrange multiple branches in the stack interactively (gt reorder)

  rename [name]     Rename the current branch (gt rename)
                    --force, -f: allow renaming branch with open PR

  push              Push all branches in the stack using Graphite (gt submit)
                    --force, -f: force push branches
                    --dry-run: show what would be pushed without pushing

  sync              Sync the stack with remote changes using Graphite (gt sync)
                    --continue: continue a sync operation after resolving conflicts

  restack           Fix stack relationships and rebase onto correct parents (gt restack)

Examples:
  wt stack                          # Show stack structure
  wt stack --current                # Show current branch's stack
  wt stack parent main              # Set current branch's parent to main
  wt stack open feature/branch      # Create worktrees for stack
  wt stack move --onto main         # Move current branch onto main
  wt stack rename new-branch-name   # Rename current branch
  wt stack rename                   # Interactive rename prompt
  wt stack push                     # Push stack to remote
  wt stack push --force             # Force push stack
  wt stack sync                     # Sync with remote
  wt stack restack                  # Fix stack relationships

Notes:
  - Most operations delegate to Graphite (gt) for stack management
  - Worktrees are created in ~/.local/worktrees/<project-name>/
  - Stack metadata is shared between all worktrees
EOF
}

log() {
    if [ "$QUIET" = false ]; then
        echo "$@" >&2
    fi
}


# The open_stack_branches function is defined in stack-advanced.sh
# Just need to source it
source "${LIB_DIR}/stack-advanced.sh"

# Parse main command-line arguments
SUBCOMMAND="${1:-}"
shift || true

# Handle special flags that don't need subcommands
if [ "$SUBCOMMAND" = "--help" ] || [ "$SUBCOMMAND" = "-h" ]; then
    usage
    exit 0
elif [ "$SUBCOMMAND" = "--current" ]; then
    STACK_CURRENT=true
    show_worktree_stack
    exit 0
elif [ "$SUBCOMMAND" = "--install" ]; then
    INSTALL_GIT_STACK=true
    show_worktree_stack
    exit 0
fi

# Handle subcommands
case "${SUBCOMMAND:-show}" in
    show|"")
        show_worktree_stack
        ;;

    parent)
        set_stack_parent "$@"
        ;;

    open)
        # Parse arguments, collecting flags and branch name
        branch=""
        while [ $# -gt 0 ]; do
            case "$1" in
                --create-sessions)
                    STACK_CREATE_SESSIONS=true
                    shift
                    ;;
                *)
                    if [ -z "$branch" ]; then
                        branch="$1"
                        shift
                    else
                        echo "Error: Unexpected argument: $1" >&2
                        exit 1
                    fi
                    ;;
            esac
        done
        open_stack_branches "$branch"
        ;;

    move)
        stack_move "$@"
        ;;

    reorder)
        # Check if gt is available
        if ! command -v gt &>/dev/null; then
            echo "Error: Graphite (gt) is required for stack operations" >&2
            echo "Install with: brew install graphite or visit https://graphite.dev" >&2
            exit 2
        fi
        # Pure delegation to gt reorder
        log "Opening interactive reorder mode..."
        if ! gt reorder; then
            echo "Error: Failed to reorder branches" >&2
            echo "If there are conflicts, resolve them and run 'wt continue'" >&2
            exit 1
        fi
        ;;

    rename)
        # Check if gt is available
        if ! command -v gt &>/dev/null; then
            echo "Error: Graphite (gt) is required for stack operations" >&2
            echo "Install with: brew install graphite or visit https://graphite.dev" >&2
            exit 2
        fi
        # Pure delegation to gt rename
        log "Renaming current branch..."
        gt rename "$@"
        ;;

    push)
        # Check if gt is available
        if ! command -v gt &>/dev/null; then
            echo "Error: Graphite (gt) is required for stack operations" >&2
            echo "Install with: brew install graphite or visit https://graphite.dev" >&2
            exit 2
        fi

        # Parse flags for push command
        force=false
        dry_run=false
        while [ $# -gt 0 ]; do
            case "$1" in
                --force|-f)
                    force=true
                    shift
                    ;;
                --dry-run)
                    dry_run=true
                    shift
                    ;;
                *)
                    echo "Error: Unknown argument for push: $1" >&2
                    echo "Usage: wt stack push [--force|-f] [--dry-run]" >&2
                    exit 1
                    ;;
            esac
        done

        log "Pushing stack to remote..."

        # Build gt submit command
        gt_args=(submit --stack --no-interactive)
        [ "$force" = true ] && gt_args+=(--force)
        [ "$dry_run" = true ] && gt_args+=(--dry-run)

        if gt "${gt_args[@]}"; then
            if [ "$dry_run" = false ]; then
                log "âœ“ Stack pushed successfully!"
            fi
        else
            echo "Error: Failed to push stack" >&2
            if [ "$force" = false ]; then
                echo "To force push, run: wt stack push --force" >&2
            fi
            exit 1
        fi
        ;;

    sync)
        sync_worktree_stack "$@"
        ;;

    restack)
        restack_worktree
        ;;

    *)
        echo "Error: Unknown subcommand: $SUBCOMMAND" >&2
        echo "" >&2
        usage >&2
        exit 1
        ;;
esac