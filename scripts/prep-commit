#!/usr/bin/env bash
set -uo pipefail

# Create log file with timestamp
LOG_FILE="prep-commit-$(date +%Y%m%d-%H%M%S).log"

# Signal handling for clean exit
trap 'echo "Interrupted" | tee -a "$LOG_FILE"; exit 130' INT

# Check dependencies
if ! command -v claude &> /dev/null; then
  echo "Error: claude command not found" | tee -a "$LOG_FILE" >&2
  exit 1
fi

echo "Starting pre-commit checks..." | tee -a "$LOG_FILE"
echo "Logging to: $LOG_FILE" | tee -a "$LOG_FILE"

# Start PLT generation in background to speed up later dialyzer run
echo "Pre-building dialyzer PLT cache..." | tee -a "$LOG_FILE"
mix dialyzer --plt &>/dev/null &
PLT_PID=$!

COMPLETE="false"
until [[ "${COMPLETE}" == "true" ]]; do
  COMPLETE="true"
  CHECK_FAILED="false"

  # Compilation check with inner retry loop
  echo "Compiling code..." | tee -a "$LOG_FILE"
  until mix compile --warnings-as-errors --force 2>&1 | tee -a "$LOG_FILE"; do
    echo "âœ— Compilation failed, requesting fixes..." | tee -a "$LOG_FILE"
    if ! claude -p --dangerously-skip-permissions "/fix:compilation" 2>&1 | tee -a "$LOG_FILE"; then
      echo "Error: Failed to run claude fix command" | tee -a "$LOG_FILE" >&2
      exit 1
    fi
    echo "Retrying compilation..." | tee -a "$LOG_FILE"
    CHECK_FAILED="true"
  done
  echo "âœ“ Compilation passed" | tee -a "$LOG_FILE"
  if [[ "${CHECK_FAILED}" == "true" ]]; then
    continue
  fi

  echo "Formatting code..." | tee -a "$LOG_FILE"
  if mix format 2>&1 | tee -a "$LOG_FILE"; then
    echo "âœ“ Code formatted" | tee -a "$LOG_FILE"
  fi

  # Credo check with inner retry loop
  CHECK_FAILED="false"
  echo "Running credo..." | tee -a "$LOG_FILE"
  until mix credo --strict 2>&1 | tee -a "$LOG_FILE"; do
    echo "âœ— Credo failed, requesting fixes..." | tee -a "$LOG_FILE"
    if ! claude -p --dangerously-skip-permissions "/fix:credo" 2>&1 | tee -a "$LOG_FILE"; then
      echo "Error: Failed to run claude fix command" | tee -a "$LOG_FILE" >&2
      exit 1
    fi
    echo "Retrying credo..." | tee -a "$LOG_FILE"
    CHECK_FAILED="true"
  done
  echo "âœ“ Credo passed" | tee -a "$LOG_FILE"
  if [[ "${CHECK_FAILED}" == "true" ]]; then
    continue
  fi

  # Tests check with inner retry loop
  CHECK_FAILED="false"
  echo "Running tests..." | tee -a "$LOG_FILE"
  MIX_ENV=test mix ecto.drop
  until mix test 2>&1 | tee -a "$LOG_FILE"; do
    echo "âœ— Tests failed, requesting fixes..." | tee -a "$LOG_FILE"
    if ! claude -p --dangerously-skip-permissions "/fix:tests" 2>&1 | tee -a "$LOG_FILE"; then
      echo "Error: Failed to run claude fix command" | tee -a "$LOG_FILE" >&2
      exit 1
    fi
    echo "Retrying tests..." | tee -a "$LOG_FILE"
    MIX_ENV=test mix ecto.drop
    CHECK_FAILED="true"
  done
  echo "âœ“ Tests passed" | tee -a "$LOG_FILE"
  if [[ "${CHECK_FAILED}" == "true" ]]; then
    continue
  fi

  # Dialyzer check with inner retry loop
  CHECK_FAILED="false"
  echo "Running dialyzer..." | tee -a "$LOG_FILE"
  # Wait for PLT generation to complete if still running
  if kill -0 "$PLT_PID" 2>/dev/null; then
    echo "Waiting for PLT cache to finish..." | tee -a "$LOG_FILE"
    wait "$PLT_PID"
  fi
  until mix dialyzer 2>&1 | tee -a "$LOG_FILE"; do
    echo "âœ— Dialyzer failed, requesting fixes..." | tee -a "$LOG_FILE"
    if ! claude -p --dangerously-skip-permissions "/fix:dialyzer" 2>&1 | tee -a "$LOG_FILE"; then
      echo "Error: Failed to run claude fix command" | tee -a "$LOG_FILE" >&2
      exit 1
    fi
    echo "Retrying dialyzer..." | tee -a "$LOG_FILE"
    CHECK_FAILED="true"
  done
  echo "âœ“ Dialyzer passed" | tee -a "$LOG_FILE"
  if [[ "${CHECK_FAILED}" == "true" ]]; then
    continue
  fi
done

echo "ðŸŽ‰ All checks passed!" | tee -a "$LOG_FILE"
