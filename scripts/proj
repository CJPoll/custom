#! /usr/bin/env ruby

class Project
  attr_reader :name

  def initialize(project_name, explicit_path = nil)
    @name = project_name
    @project_path = explicit_path
  end

  def empty?
    @name.nil?
  end

  def path
    dev_path = DevPath.new(ENV['DEVPATH'])
    @project_path ||= dev_path.path_for(name)
    @project_path
  end
end

class DevPath
  def initialize(path)
    @dev_directories = path.split(":")
  end

  def path_for(project_name)
    @dev_directories.each do |dev_directory|
      project_path = "#{dev_directory}/#{project_name}"

      if File.exist?(project_path)
        return project_path
      end
    end

    return nil
  end
end

class Session
  def initialize(sessions)
    @sessions = sessions
  end

  def missing?
    @sessions.nil? or @sessions == "" or @sessions.match?(/\A\s*0\n\z/)
  end

  def self.for(project)
    sessions = `tmux list-sessions | egrep "^#{project.name}" | cut -d" " -f1 | wc -l`
    new(sessions)
  end

  def self.open(project)
    # Determine editor command
    editor = ENV['EDITOR'] || 'vim'
    editor_cmd = if editor == "vim" || editor == "nvim"
      "#{editor} +NERDTree"
    else
      editor
    end
    
    # Create session with editor running in the first window
    `tmux new-session -d -n "Work" -c "#{project.path}" -s "#{project.name}" "#{editor_cmd}"`
  end

  def self.init(project)
    # Create a 25% split window in the newly created session's first window
    `tmux split-window -p 25 -c "#{project.path}" -t "#{project.name}:0"`
    
    # Create a new window named "Server" at index 3 in the new session
    `tmux new-window -c "#{project.path}" -n "Server" -t "#{project.name}:3"`
    
    # Select the first window and pane in the new session
    `tmux select-window -t "#{project.name}:0"`
    `tmux select-pane -t "#{project.name}:0.0"`
  end

  def self.switch_to(project)
    `tmux switch-client -t #{project.name};`
  end
end

def main(project_name, explicit_path = nil)
  project = Project.new(project_name, explicit_path)

  if project.empty?
    puts "Oh noez! You didn't say which program ðŸ˜±"
    exit(1)
  end

  unless project.path
    puts "ðŸš« ðŸ”Ž  Project #{project.name} does not exist!";
    exit 1;
  end

  session = Session.for(project)

  if session.missing?
    Session.open(project)
    Session.init(project)
  end

  Session.switch_to(project)

  exit(0)
end

def print_path(project_name)
  project = Project.new(project_name)

  if project.empty?
    puts "Oh noez! You didn't say which program ðŸ˜±"
    exit(1)
  end

  unless project.path
    puts "ðŸš« ðŸ”Ž  Project #{project.name} does not exist!";
    exit 1;
  end

  puts project.path
end

project_name = ARGV[0]

# Check if we have --path argument
explicit_path = nil
if ARGV[1] == "--path" && ARGV[2]
  explicit_path = ARGV[2]
  # If there's a 4th argument after path, check if it's "print"
  if ARGV[3] == "print"
    print_path(project_name)
    exit
  end
elsif ARGV[1] == "print"
  print_path(project_name)
  exit
end

main(project_name, explicit_path)
