#!/bin/bash

set -euo pipefail

PROJECT_DIR="$(pwd)"
WORKTREES_DIR="$PROJECT_DIR/worktrees"

QUIET=false
MODIFY_GITIGNORE=false
NO_SYMLINK=false
CHECK_DIR=""
PR_REVIEW=false
BASE_BRANCH="main"

usage() {
    cat << EOF
Usage: wt <command> [options]

Commands:
  init              Set up the worktrees directory
  list              List all worktrees for the current project
  create <branch>   Create a worktree for the specified branch
                    (symlinks .claude/ directory from main project if present)
  rm <branch>       Remove the worktree for the specified branch
  switch <branch>   Change to the worktree for the specified branch
  is-worktree       Check if a directory is a git worktree
                    Exit codes: 0=worktree, 1=project root, 2=neither

Options:
  --quiet           Suppress output from script and subcommands
  --gitignore       Modify .gitignore to exclude worktrees directory (for init command)
  --no-symlink      Do not create symlink to .claude directory (for create command)
  --dir <directory> Check the specified directory (for is-worktree command, defaults to current dir)
  --pr-review       Open changed files in tabs for PR review (for switch command)
  --base-branch <branch> Base branch for PR review (for switch command, defaults to main)

Examples:
  wt init
  wt init --gitignore
  wt list
  wt create feature/my-feature
  wt create --no-symlink experimental/test
  wt switch feature/my-feature
  wt switch feature/my-feature --pr-review
  wt switch feature/my-feature --pr-review --base-branch develop
  wt rm feature/my-feature
  wt create --quiet bugfix/issue-123
  wt is-worktree
  wt is-worktree --dir /path/to/directory
EOF
}

log() {
    if [ "$QUIET" = false ]; then
        echo "$@" >&2
    fi
}

run_cmd() {
    if [ "$QUIET" = true ]; then
        "$@" >/dev/null 2>&1
    else
        "$@"
    fi
}

init_worktrees() {
    log "Initializing worktrees directory..."
    
    if [ ! -d "$PROJECT_DIR/.git" ]; then
        echo "Error: Not in a git repository" >&2
        exit 1
    fi
    
    mkdir -p "$WORKTREES_DIR"
    
    if [ "$MODIFY_GITIGNORE" = true ]; then
        if [ ! -f "$PROJECT_DIR/.gitignore" ]; then
            echo "worktrees/" > "$PROJECT_DIR/.gitignore"
            log "Created $PROJECT_DIR/.gitignore"
        else
            # Check if worktrees/ is already in .gitignore
            if ! grep -q "^worktrees/$" "$PROJECT_DIR/.gitignore"; then
                echo "worktrees/" >> "$PROJECT_DIR/.gitignore"
                log "Added worktrees/ to $PROJECT_DIR/.gitignore"
            fi
        fi
    fi
    
    log "Worktrees directory initialized at: $WORKTREES_DIR"
}

list_worktrees() {
    if [ ! -d "$WORKTREES_DIR" ]; then
        log "No worktrees directory found. Run 'wt init' first."
        return 0
    fi
    
    # Get list of directories in worktrees
    local worktrees=()
    if [ -d "$WORKTREES_DIR" ]; then
        while IFS= read -r -d '' dir; do
            worktrees+=("$(basename "$dir")")
        done < <(find "$WORKTREES_DIR" -mindepth 1 -maxdepth 1 -type d -print0 2>/dev/null)
    fi
    
    if [ ${#worktrees[@]} -eq 0 ]; then
        log "No worktrees found."
        return 0
    fi
    
    # Get current branch for comparison
    local current_branch
    current_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "")
    
    log "Worktrees for this project:"
    log ""
    
    # Use git worktree list to get more info
    local git_worktrees
    git_worktrees=$(git worktree list 2>/dev/null || echo "")
    
    for worktree in "${worktrees[@]}"; do
        local marker=""
        local worktree_path="$WORKTREES_DIR/$worktree"
        
        # Check if this is the current directory
        if [[ "$(pwd)" == "$worktree_path" ]]; then
            marker=" *"
        fi
        
        # Try to get the commit info from git worktree list
        local commit_info=""
        if [[ -n "$git_worktrees" ]]; then
            commit_info=$(echo "$git_worktrees" | grep "$worktree_path" | awk '{print $2, $3}' || echo "")
        fi
        
        if [[ -n "$commit_info" ]]; then
            echo "  $worktree$marker ($commit_info)"
        else
            echo "  $worktree$marker"
        fi
    done
}

create_worktree() {
    local branch="$1"
    local worktree_path="$WORKTREES_DIR/$branch"
    
    if [ -z "$branch" ]; then
        echo "Error: Branch name is required" >&2
        usage
        exit 1
    fi
    
    if [ ! -d "$WORKTREES_DIR" ]; then
        log "Worktrees directory not found. Running init first..."
        init_worktrees
    fi
    
    if [ -d "$worktree_path" ]; then
        echo "Error: Worktree already exists at: $worktree_path" >&2
        exit 1
    fi
    
    log "Creating worktree for branch: $branch"
    
    # Check if branch exists
    if git show-ref --verify --quiet "refs/heads/$branch"; then
        log "Checking out existing branch: $branch"
        run_cmd git worktree add "$worktree_path" "$branch"
    else
        # Check if it exists as a remote branch
        if git show-ref --verify --quiet "refs/remotes/origin/$branch"; then
            log "Creating local branch from remote: origin/$branch"
            run_cmd git worktree add "$worktree_path" -b "$branch" "origin/$branch"
        else
            log "Creating new branch: $branch"
            run_cmd git worktree add "$worktree_path" -b "$branch"
        fi
    fi
    
    log "Worktree created at: $worktree_path"
    
    # Create symlink to .claude directory if it exists in the main project (unless --no-symlink is set)
    if [ "$NO_SYMLINK" = false ] && [ -d "$PROJECT_DIR/.claude" ]; then
        if [ ! -e "$worktree_path/.claude" ]; then
            ln -s "$PROJECT_DIR/.claude" "$worktree_path/.claude"
            log "Created symlink to .claude directory"
        else
            log "Warning: .claude already exists in worktree, skipping symlink"
        fi
    fi
}

remove_worktree() {
    local branch="$1"
    local worktree_path="$WORKTREES_DIR/$branch"
    
    if [ -z "$branch" ]; then
        echo "Error: Branch name is required" >&2
        usage
        exit 1
    fi
    
    if [ ! -d "$worktree_path" ]; then
        echo "Error: Worktree not found at: $worktree_path" >&2
        exit 1
    fi
    
    log "Removing worktree for branch: $branch"
    
    # Remove the worktree
    run_cmd git worktree remove "$worktree_path" --force
    
    # Clean up any remaining directory if it exists
    if [ -d "$worktree_path" ]; then
        rm -rf "$worktree_path"
    fi
    
    # Prune worktree metadata
    run_cmd git worktree prune
    
    log "Worktree removed: $branch"
}

switch_worktree() {
    local branch="$1"
    local worktree_path="$WORKTREES_DIR/$branch"
    
    if [ -z "$branch" ]; then
        echo "Error: Branch name is required" >&2
        usage
        return 1
    fi
    
    if [ ! -d "$worktree_path" ]; then
        echo "Error: Worktree not found at: $worktree_path" >&2
        echo "Available worktrees:" >&2
        if [ -d "$WORKTREES_DIR" ]; then
            ls -1 "$WORKTREES_DIR" 2>/dev/null | sed 's/^/  /' >&2
        fi
        return 1
    fi
    
    log "Switching to worktree: $branch"
    
    # Get the project name from the current directory
    local project_name=$(basename "$PROJECT_DIR")
    
    # Create session name with worktree info
    # Replace slashes in branch name with dashes to avoid tmux issues
    local safe_branch=$(echo "$branch" | tr '/' '-')
    local session_name="${project_name}-wt-${safe_branch}"
    
    # Call proj directly, with optional --pr-review flag
    if [ "$PR_REVIEW" = true ]; then
        proj "$session_name" --path "$worktree_path" --pr-review --base-branch "$BASE_BRANCH"
    else
        proj "$session_name" --path "$worktree_path"
    fi
}

is_worktree() {
    local dir="${CHECK_DIR:-$(pwd)}"
    
    # Get the absolute path
    dir="$(realpath "$dir" 2>/dev/null)" || exit 2
    
    # Check if directory is an immediate child of any DEVPATH directory
    if [[ -n "$DEVPATH" ]]; then
        # Split DEVPATH by colon
        IFS=':' read -ra DEV_DIRS <<< "$DEVPATH"
        for dev_dir in "${DEV_DIRS[@]}"; do
            # Expand the dev_dir path (handle ~ and variables)
            dev_dir="$(eval echo "$dev_dir")"
            dev_dir="$(realpath "$dev_dir" 2>/dev/null)" || continue
            
            # Check if dir is an immediate child of this dev_dir
            local parent_dir="$(dirname "$dir")"
            if [[ "$parent_dir" == "$dev_dir" ]]; then
                # This is a project root directory, not a worktree
                exit 1
            fi
        done
    fi
    
    # Find the git directory by traversing up from the target directory
    local git_dir="$dir"
    while [[ "$git_dir" != "/" ]]; do
        if [[ -d "$git_dir/.git" ]] || [[ -f "$git_dir/.git" ]]; then
            # Check if git worktree list contains this directory
            if git -C "$git_dir" worktree list 2>/dev/null | grep -q "^$dir\s"; then
                exit 0
            else
                exit 2
            fi
        fi
        git_dir="$(dirname "$git_dir")"
    done
    
    # Not in a git repository
    exit 2
}

# Parse command line arguments
COMMAND=""
BRANCH=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        --quiet)
            QUIET=true
            shift
            ;;
        --gitignore)
            MODIFY_GITIGNORE=true
            shift
            ;;
        --no-symlink)
            NO_SYMLINK=true
            shift
            ;;
        --pr-review)
            PR_REVIEW=true
            shift
            ;;
        --base-branch)
            shift
            if [[ $# -eq 0 ]]; then
                echo "Error: --base-branch requires a branch name" >&2
                exit 1
            fi
            BASE_BRANCH="$1"
            shift
            ;;
        --dir)
            shift
            if [[ $# -eq 0 ]]; then
                echo "Error: --dir requires a directory path" >&2
                exit 1
            fi
            CHECK_DIR="$1"
            shift
            ;;
        init|list|ls|create|rm|switch|is-worktree)
            COMMAND="$1"
            shift
            if [[ "$COMMAND" == "create" || "$COMMAND" == "rm" || "$COMMAND" == "switch" ]] && [[ $# -gt 0 ]] && [[ ! "$1" =~ ^-- ]]; then
                BRANCH="$1"
                shift
            fi
            ;;
        -h|--help|help)
            usage
            exit 0
            ;;
        *)
            echo "Error: Unknown argument: $1" >&2
            usage
            exit 1
            ;;
    esac
done

# Execute the appropriate command
case "$COMMAND" in
    init)
        init_worktrees
        ;;
    list|ls)
        list_worktrees
        ;;
    create)
        create_worktree "$BRANCH"
        ;;
    rm)
        remove_worktree "$BRANCH"
        ;;
    switch)
        switch_worktree "$BRANCH"
        ;;
    is-worktree)
        is_worktree
        ;;
    "")
        echo "Error: No command specified" >&2
        usage
        exit 1
        ;;
    *)
        echo "Error: Unknown command: $COMMAND" >&2
        usage
        exit 1
        ;;
esac

