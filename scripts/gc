#!/bin/bash

# gc: Generate a git commit message using Claude Code and commit with it

usage() {
    cat << EOF
Usage: gc [options]

Generate a git commit message using Claude Code and commit staged changes.

Options:
  --push            Push to origin after successful commit
  -h, --help        Show this help message

Description:
  This script uses Claude Code to generate a conventional commit message
  for your staged changes. The generated message is opened in your editor
  for review and modification before committing.

  The commit message follows the conventional commits specification and
  includes Claude Code as a co-author.

Examples:
  gc                Create a commit with AI-generated message
  gc --push         Create a commit and push to origin

Requirements:
  - Claude Code CLI must be installed and available
  - Git repository with staged changes
  - \$EDITOR environment variable set (defaults to vim)
EOF
}

# Parse command line arguments
PUSH_FLAG=false
while [[ $# -gt 0 ]]; do
    case "$1" in
        --push)
            PUSH_FLAG=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo "Error: Unknown option: $1" >&2
            echo "Try 'gc --help' for more information." >&2
            exit 1
            ;;
    esac
done

# Check if there are staged changes
if ! git diff --cached --quiet; then
    # Create a temporary file for the commit message
    TEMP_FILE=$(mktemp)
    
    # Function to show spinner
    spinner() {
        local pid=$1
        local delay=0.1
        local spinstr='/-\|'
        local msg="Asking Claude Code to generate a commit message..."
        while kill -0 $pid 2>/dev/null; do
            local temp=${spinstr#?}
            printf "\r%c %s" "$spinstr" "$msg"
            spinstr=$temp${spinstr%"$temp"}
            sleep $delay
        done
        printf "\r%*s\r" $((${#msg}+3)) ""
    }
    
    # Get the commit message from Claude Code
    claude "Generate a git commit message for staged changes. Give no additional output beyond the commit message. Format according to 'conventional commits' style, providing all information in the 'conventional commit' specification which is currently available. Include credit to Claude Code as co-author. Ensure that every line is at most 80 characters." > "$TEMP_FILE" &
    CLAUDE_PID=$!
    spinner $CLAUDE_PID
    wait $CLAUDE_PID
    
    # Check if Claude Code produced output
    if [ -s "$TEMP_FILE" ]; then
        # Open the message in the editor first
        ${EDITOR:-vim} "$TEMP_FILE"
        
        # Then commit with the edited message
        git commit -F "$TEMP_FILE"
        COMMIT_STATUS=$?
        
        # Clean up the temporary file
        rm "$TEMP_FILE"
        
        # Push to origin if --push flag was provided and commit succeeded
        if [ $COMMIT_STATUS -eq 0 ] && [ "$PUSH_FLAG" = true ]; then
            echo "Pushing to origin..."
            git push origin
        fi
    else
        echo "Error: Claude Code did not generate a commit message"
        rm "$TEMP_FILE"
        exit 1
    fi
else
    echo "No staged changes to commit"
    exit 1
fi
