#!/bin/bash

# gc: Generate a git commit message using Claude Code and commit with it

usage() {
    cat << EOF
Usage: gc [options]

Generate a git commit message using Claude Code and commit staged changes.

Options:
  --all             Stage all files before committing (git add -A)
  --push            Push to origin after successful commit
  --pr              Create a GitHub PR after pushing (implies --push)
  --base-branch <branch>  Specify base branch for PR (requires --pr)
  --yolo            Skip editor review and commit directly with AI message
  -h, --help        Show this help message

Description:
  This script uses Claude Code to generate a conventional commit message
  for your staged changes. The generated message is opened in your editor
  for review and modification before committing.

  The commit message follows the conventional commits specification and
  includes Claude Code as a co-author.

Examples:
  gc                Create a commit with AI-generated message
  gc --all          Stage all files and create a commit
  gc --push         Create a commit and push to origin
  gc --all --push   Stage all files, commit, and push
  gc --pr            Commit, push, and create a GitHub PR
  gc --pr --base-branch develop  Create PR against develop branch
  gc --yolo          Commit directly without editor review

Requirements:
  - Claude Code CLI must be installed and available
  - Git repository with staged changes (or use --all flag)
  - \$EDITOR environment variable set (defaults to vim)
  - gh CLI installed (for --pr flag)
EOF
}

# Parse command line arguments
PUSH_FLAG=false
ALL_FLAG=false
PR_FLAG=false
YOLO_FLAG=false
BASE_BRANCH=""
while [[ $# -gt 0 ]]; do
    case "$1" in
        --all)
            ALL_FLAG=true
            shift
            ;;
        --push)
            PUSH_FLAG=true
            shift
            ;;
        --pr)
            PR_FLAG=true
            PUSH_FLAG=true  # --pr implies --push
            shift
            ;;
        --base-branch)
            if [[ -z "$2" || "$2" =~ ^-- ]]; then
                echo "Error: --base-branch requires a branch name" >&2
                exit 1
            fi
            BASE_BRANCH="$2"
            shift 2
            ;;
        --yolo)
            YOLO_FLAG=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo "Error: Unknown option: $1" >&2
            echo "Try 'gc --help' for more information." >&2
            exit 1
            ;;
    esac
done

# Validate flag combinations
if [ -n "$BASE_BRANCH" ] && [ "$PR_FLAG" = false ]; then
    echo "Error: --base-branch requires --pr flag" >&2
    exit 1
fi

# Stage all files if --all flag is set
if [ "$ALL_FLAG" = true ]; then
    echo "Staging all files..."
    git add -A
fi

# Check if there are staged changes
if ! git diff --cached --quiet; then
    # Create a temporary file for the commit message
    TEMP_FILE=$(mktemp)
    
    # Function to show spinner
    spinner() {
        local pid=$1
        local delay=0.1
        local spinstr='/-\|'
        local msg="Asking Claude Code to generate a commit message..."
        while kill -0 $pid 2>/dev/null; do
            local temp=${spinstr#?}
            printf "\r%c %s" "$spinstr" "$msg"
            spinstr=$temp${spinstr%"$temp"}
            sleep $delay
        done
        printf "\r%*s\r" $((${#msg}+3)) ""
    }
    
    # Get the commit message from Claude Code
    claude "Generate a git commit message for staged changes. Give no additional output beyond the commit message. Format according to 'conventional commits' style, providing all information in the 'conventional commit' specification which is currently available. Include credit to Claude Code as co-author. Ensure that every line is at most 80 characters." > "$TEMP_FILE" &
    CLAUDE_PID=$!
    spinner $CLAUDE_PID
    wait $CLAUDE_PID
    
    # Check if Claude Code produced output
    if [ -s "$TEMP_FILE" ]; then
        # Skip editor if --yolo flag is set
        if [ "$YOLO_FLAG" = false ]; then
            # Open the message in the editor first
            ${EDITOR:-vim} "$TEMP_FILE"
        fi
        
        # Then commit with the edited message
        git commit -F "$TEMP_FILE"
        COMMIT_STATUS=$?
        
        # Clean up the temporary file
        rm "$TEMP_FILE"
        
        # Push to origin if --push flag was provided and commit succeeded
        if [ $COMMIT_STATUS -eq 0 ] && [ "$PUSH_FLAG" = true ]; then
            echo "Pushing to origin..."
            git push origin
            PUSH_STATUS=$?
            
            # Create PR if --pr flag was provided and push succeeded
            if [ $PUSH_STATUS -eq 0 ] && [ "$PR_FLAG" = true ]; then
                # Get current branch name
                CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
                
                # Use provided base branch or detect default
                if [ -z "$BASE_BRANCH" ]; then
                    BASE_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@' || echo "main")
                fi
                
                # Check if PR already exists for this branch
                EXISTING_PR=$(gh pr list --head "$CURRENT_BRANCH" --base "$BASE_BRANCH" --json number --jq '.[0].number' 2>/dev/null)
                
                if [ -n "$EXISTING_PR" ]; then
                    echo "PR #$EXISTING_PR already exists for $CURRENT_BRANCH -> $BASE_BRANCH"
                    echo "Generating updated PR description based on full diff..."
                    
                    # Create a temporary file for PR description
                    PR_TEMP_FILE=$(mktemp)
                    
                    # Generate PR description using Claude Code based on entire diff
                    git diff "$BASE_BRANCH"..."$CURRENT_BRANCH" | claude "Generate a GitHub PR description based on the following diff. Include a summary of changes, any breaking changes, and testing suggestions. Format it with markdown. Give no additional output beyond the PR description." > "$PR_TEMP_FILE" &
                    CLAUDE_PR_PID=$!
                    spinner $CLAUDE_PR_PID
                    wait $CLAUDE_PR_PID
                    
                    if [ -s "$PR_TEMP_FILE" ]; then
                        # Skip editor if --yolo flag is set
                        if [ "$YOLO_FLAG" = false ]; then
                            # Open PR description in editor for review
                            ${EDITOR:-vim} "$PR_TEMP_FILE"
                        fi
                        
                        # Update the existing PR
                        gh pr edit "$EXISTING_PR" --body-file "$PR_TEMP_FILE"
                        echo "Updated PR #$EXISTING_PR with new description"
                        
                        # Clean up
                        rm "$PR_TEMP_FILE"
                    else
                        echo "Error: Could not generate PR description"
                        rm "$PR_TEMP_FILE"
                    fi
                else
                    echo "Creating GitHub PR..."
                    echo "Creating PR from $CURRENT_BRANCH to $BASE_BRANCH"
                    
                    # Create a temporary file for PR description
                    PR_TEMP_FILE=$(mktemp)
                    
                    # Generate PR description using Claude Code
                    echo "Generating PR description..."
                    git diff "$BASE_BRANCH"..."$CURRENT_BRANCH" | claude "Generate a GitHub PR description based on the following diff. Include a summary of changes, any breaking changes, and testing suggestions. Format it with markdown. Give no additional output beyond the PR description." > "$PR_TEMP_FILE" &
                    CLAUDE_PR_PID=$!
                    spinner $CLAUDE_PR_PID
                    wait $CLAUDE_PR_PID
                    
                    if [ -s "$PR_TEMP_FILE" ]; then
                        # Skip editor if --yolo flag is set
                        if [ "$YOLO_FLAG" = false ]; then
                            # Open PR description in editor for review
                            ${EDITOR:-vim} "$PR_TEMP_FILE"
                        fi
                        
                        # Extract the first line for PR title (from commit message)
                        PR_TITLE=$(git log -1 --pretty=%s)
                        
                        # Create the PR
                        gh pr create --base "$BASE_BRANCH" --title "$PR_TITLE" --body-file "$PR_TEMP_FILE"
                        
                        # Clean up
                        rm "$PR_TEMP_FILE"
                    else
                        echo "Error: Could not generate PR description"
                        rm "$PR_TEMP_FILE"
                    fi
                fi
            fi
        fi
    else
        echo "Error: Claude Code did not generate a commit message"
        rm "$TEMP_FILE"
        exit 1
    fi
else
    echo "No staged changes to commit"
    exit 1
fi
